[
  {
    "objectID": "sc_rna_seq_analysis/index.html",
    "href": "sc_rna_seq_analysis/index.html",
    "title": "Single Cell RNA-seq Project Home",
    "section": "",
    "text": "Welcome to the Single Cell RNA-seq Project\nClick the links below to explore:\n\nAnalysis summary"
  },
  {
    "objectID": "sc_rna_seq_analysis/geo_single_cell_rna_analysis.html",
    "href": "sc_rna_seq_analysis/geo_single_cell_rna_analysis.html",
    "title": "Single-cell RNA-seq Analysis",
    "section": "",
    "text": "I will be using Quarto, a super set of R Markdown for this Single-Cell RNA-seq Analysis. Quarto allows for the creation of detailed scientific reports (along with other formats like interactive web pages, dashboards, etc.) to help encourage collaboration and shareability of bioinformatics workflows.\nAlong with Quarto, I will be using the package manager pixi for further reproducibility, as well as the data workflow software snakemake for handling input/output and making the analysis clear and easy to follow.\nThe following links give instructions for downloading/installing and using these helpful tools.\nQuarto\nPixi\nSnakemake\nOnce these tools are installed, the first step is to initialize a git repository for tracking file changes/updates and create a pixi environment.\n\n\nCode\npixi init sc_rna_seq_analysis --channel conda-forge --channel bioconda\ncd sc_rna_seq_analysis\n\ngit init\n# Create a remote repository through github then add the remote repo\ngit add remote origin https://github.com/elittlestone/SC_RNA_SEQ\ntouch geo_single_cell_rna_analysis.qmd\ngit add geo_single_cell_rna_analysis.qmd\ngit commit -m \"Adding quarto notebook to git repository\"\ngit push origin main\n\n\nAdding necessary packages through pixi can be done as follows:\n\n\nCode\npixi add python snakemake sra-tools scanpy anndata cellxgene scikit-image \\\npandas quarto anndata harmonypy\n\n\nFor the rest of the analysis, our commands can either be run via pixi by doing: pixi run ‘executable’ or by launching a subshell with pixi s and running commands as normal."
  },
  {
    "objectID": "sc_rna_seq_analysis/geo_single_cell_rna_analysis.html#environment-setuppackage-installation",
    "href": "sc_rna_seq_analysis/geo_single_cell_rna_analysis.html#environment-setuppackage-installation",
    "title": "Single-cell RNA-seq Analysis",
    "section": "",
    "text": "I will be using Quarto, a super set of R Markdown for this Single-Cell RNA-seq Analysis. Quarto allows for the creation of detailed scientific reports (along with other formats like interactive web pages, dashboards, etc.) to help encourage collaboration and shareability of bioinformatics workflows.\nAlong with Quarto, I will be using the package manager pixi for further reproducibility, as well as the data workflow software snakemake for handling input/output and making the analysis clear and easy to follow.\nThe following links give instructions for downloading/installing and using these helpful tools.\nQuarto\nPixi\nSnakemake\nOnce these tools are installed, the first step is to initialize a git repository for tracking file changes/updates and create a pixi environment.\n\n\nCode\npixi init sc_rna_seq_analysis --channel conda-forge --channel bioconda\ncd sc_rna_seq_analysis\n\ngit init\n# Create a remote repository through github then add the remote repo\ngit add remote origin https://github.com/elittlestone/SC_RNA_SEQ\ntouch geo_single_cell_rna_analysis.qmd\ngit add geo_single_cell_rna_analysis.qmd\ngit commit -m \"Adding quarto notebook to git repository\"\ngit push origin main\n\n\nAdding necessary packages through pixi can be done as follows:\n\n\nCode\npixi add python snakemake sra-tools scanpy anndata cellxgene scikit-image \\\npandas quarto anndata harmonypy\n\n\nFor the rest of the analysis, our commands can either be run via pixi by doing: pixi run ‘executable’ or by launching a subshell with pixi s and running commands as normal."
  },
  {
    "objectID": "sc_rna_seq_analysis/geo_single_cell_rna_analysis.html#downloading-raw-sequencing-data",
    "href": "sc_rna_seq_analysis/geo_single_cell_rna_analysis.html#downloading-raw-sequencing-data",
    "title": "Single-cell RNA-seq Analysis",
    "section": "2.1 Downloading Raw Sequencing Data",
    "text": "2.1 Downloading Raw Sequencing Data\nSratools is a suite of command-line tools that allows for the programmatic downloading of GEO data. This avoids having to download through the web and promotes reproducibility as well as error handling. Sratools comes with multiple programs, here we use the fasterq-dump command. Running fasterq-dump -h’ after downloading sratools through pixi gives helpful instructions on how to use the tool as well as the variety of different flags/parameters that can be passed to this program. I used fasterq-dump in a snakemake script to download our rna-seq reads and convert them to fastq format (fasterq-dump handles the download and file format conversion for us).\nI have also created a configuration file where we can store hard-coded values which can then be referenced via our snakefile. This makes the process highly resistant to errors consistent with hard-coding file names. From the email that Dr. Zhang sent me that brings us to a GEO page, I then found the SRR accession ID. Providing this SRR to the fasterq-dump program will then download the appropriate raw sequencing data.\nSratools Fasterq-dump\n\n\nCode\nsnakemake -s download_sra_files.smk --cores 8 -p \n\n\nWe can also go to the SRA Web Page for these samples and find useful information about the sequencing experiment and runs. Again, we can get this meta data programmatically as well using SRATools\nSequence Read Archive Web Page"
  },
  {
    "objectID": "sc_rna_seq_analysis/geo_single_cell_rna_analysis.html#read-alignment-and-transcript-quantification",
    "href": "sc_rna_seq_analysis/geo_single_cell_rna_analysis.html#read-alignment-and-transcript-quantification",
    "title": "Single-cell RNA-seq Analysis",
    "section": "2.2 Read Alignment and Transcript Quantification",
    "text": "2.2 Read Alignment and Transcript Quantification\nIn our 10x SC-RNA seq raw sequencing data, Reads 1 and 2 are technical reads, while read 3 contains our actual transcript (Read 1 is the index for demultiplexing, read2 is the Unique Molecular Identifier or UMI + cell barcode).\nThe next step is to download our reference human transcriptome as well as the Cellranger software tool from 10x genomics so we can align our raw reads and quantify them.\nDownload CellRanger\n\nRead Alignment: The raw sequencing data, which consists of short reads, is aligned to a reference genome using a suitable alignment algorithm. This step assigns reads to their respective genomic locations.\nBarcode and UMI Processing: Each cell captured by the Chromium platform has a unique barcode and unique molecular identifier (UMI). It uses these barcodes and UMIs to find low-quality cells and identify reads originating from the same cell.\nTranscript Counting: The aligned reads are then used to count the number of times each unique molecular identifier (UMI) appears for each gene. That helps in quantifying the gene expression levels in each cell.\nData Aggregation and Quality Control: The CellRanger pipeline aggregates the counts from all cells into a count matrix, representing each cell’s gene expression profile. Quality control steps are applied to filter out low-quality cells and genes.\nNormalization and Analysis: The CellRanger pipeline normalizes the count matrix to account for cell sequencing depth differences. Then, it applies differential gene expression analysis, dimensionality reduction (such as principal component analysis or t-SNE), and clustering methods to reveal patterns and relationships among cells.\nVisualization: Scientists typically visualize the results using various tools that help them interpret and present their findings effectively. These tools include the BioTuring BBrowserX and the 10x Genomics Loupe Browser.\n\n\n\nCode\nsnakemake -s download_ref_and_run_cellranger.smk --cores 8 -p"
  },
  {
    "objectID": "sc_rna_seq_analysis/geo_single_cell_rna_analysis.html#cellranger-count-output",
    "href": "sc_rna_seq_analysis/geo_single_cell_rna_analysis.html#cellranger-count-output",
    "title": "Single-cell RNA-seq Analysis",
    "section": "2.3 Cellranger Count Output",
    "text": "2.3 Cellranger Count Output\nCellranger is able to map our reads to the transcriptome and perform transcript quantification. The tool outputs an in-depth summary html file with detailed summary statistics. I have embedded an interactive html that can be explored for each sample in order to explore the outputted results from Cellranger count. As we can see from these summary statistics, we have &gt; 90% of reads mapping to our transcriptome, indicating high quality reads and a successful library prep. The mean reads per cell is not directly comparable between samples due to the different number of cells in each sample. We can also see the median number of genes expressed per cell in each sample.\n\n📊 Cell Ranger Summary: AL02\n\n\n\n\n📊 Cell Ranger Summary: AL03\n\n\nIn the 10x SC-RNA seq technology, each barcode corresponds to a droplet. Ideally, each droplet will contain one cell. However, it’s possible for two or more cells to end up in a droplet (doublet), or no cells (empty droplet). The knee-plots show how each barcode ranks in terms of total UMIs, which represent unique transcripts captured from each cell. Droplets with a sufficiently low UMI count are likely empty droplets, and Cellranger has a probabilistic model it uses to filter out these droplets and only keep ‘real cells’. Our knee-plots show steep dropoffs, meaning there is a clear distinction between real cells and empty droplets.\nInstead of just counting the total number of transcripts that map to a particular gene and considering that the expression level, UMIs are crucial in order to account for PCR bias. During library prep, transcripts are amplified before sequencing. This amplification can be biased depending on several factors like the GC content of the transcript or transcript length. The UMIs are short oligo-nucleotides that are added to the transcripts prior to amplification, capturing the total UNIQUE transcripts per gene.\nThe main output of Cellranger is a filtered gene-cell expression matrix; rows are cells (observations), columns are genes (variables/features), and values in the matrix represent the number of UMIs (transcript counts) for each gene in each cell. This count serves as a proxy for gene expression. This filtered .h5 matrix file can then be used for post-processing with software tools like Scanpy in python or Seurat in R. Cellranger count also performs its own post-processing steps including clustering and differential gene expression analysis, however I will perform my own with the python Single Cell Analysis package Scanpy.\nAnnotation Data object Schema/Layout"
  },
  {
    "objectID": "sc_rna_seq_analysis/geo_single_cell_rna_analysis.html#post-processing-with-scanpy",
    "href": "sc_rna_seq_analysis/geo_single_cell_rna_analysis.html#post-processing-with-scanpy",
    "title": "Single-cell RNA-seq Analysis",
    "section": "3 Post-processing with Scanpy",
    "text": "3 Post-processing with Scanpy\nScanpy Tutorial\n\n3.1 Quality Control\n\n\n3.1.1 Analyze Mito Counts and Select Informative Genes/Cells\nThe first steps of analyzing our Cell Ranger output involve Quality Control (QC), which includes assessing cells with high mitochondrial gene counts. High mitochondrial RNA fraction often indicates stressed, dying, or damaged cells that were lysed prematurely before droplet encapsulation in the 10x Genomics workflow. These cells are commonly filtered out because their RNA profiles may be compromised and potentially contaminated with RNA from other lysed cells.\n\n\nCode\nsnakemake -s scanpy.smk --cores 8 -p\n\n\nViolin plot AL02\n\n\nScatter plot AL02\n\n\nViolin plot AL03\n\n\nScatter plot AL03\n\n\nThe violin plots show the number of genes expressed in each cell, the total number of UMIs in each cell, and the percentage of mitochondrial UMIs/transcripts. For both samples, we see the majority of cells have ~ 1500 genes expressed, somewhere in the several thousand UMI range, and have very small proportions of mitochondrial RNA. The scatter plots just combine these QC metrics into one plot. I filtered the data to only keep cells that have a minimum of 100 genes expressed as well as removed genes which are found in less than 3 cells. \n\n3.1.2 Doublet Detection\nNext, we want to perform doublet detection. Doublets are droplets which have two or more cells and can be detected via Scanpy’s .scrublet method/function. From the scanpy documentation : “Scrublet predicts cell doublets using a nearest-neighbor classifier of observed transcriptomes and simulated doublets”. Doublet identification and removal is a CRITICAL step in post-processing. If we treat a droplet as representing a single cell when it actually represents the transcriptomic profile of multiple cells, this can dramatically skew our clustering/cell-type annotation downstream.\n\n\n\n3.2 Normalization\nThe next step is to normalize our gene expression values across cells. Differences in transcript counts between cells could be the result of a number of different technical reasons, including sequencing depth and capture efficiency, rather than reflecting true differences in gene expression levels between the cells. Additionally, some genes might be extremely highly expressed, while other genes have normal to lower level of expression, which can skew downstream steps like clustering. I use scanpy’s .normalize_total method to make transcript count comparisons between cells accurate and also perform log1p transformation to lessen the impact of very highly or lowly expressed genes.\n\n\n3.3. Feature Selection\nFeature selection involves selecting only the most informative genes for downstream analysis. If our main goal is distinguishing cell-types, the majority of genes are uninformative for this process (ex. housekeeping genes that are expressed at relatively same levels across different cell types) and additionally increase computational complexity required for steps like clustering/annotation. We choose the 2000 most variable genes by using scanpy’s .highly_variable_genes() function. The figures below are visualizations of each gene’s variation across cells.\nVariable genes AL02\n\n\nVariable genes AL03\n\n\n\n\n3.4 Dimensionality Reduction\nDimensionality reduction involves taking our selected highly-variable genes, and performing some computational steps like principal component analysis (PCA) in order to essentially collapse these genes into a smaller subset of explainers or ‘dimensions/axes’ that account for the variation we see in expression levels of genes between cells. This reduces the computational complexity even further for the downstream step of clustering. Scanpy’s function .pca computes this for us.\nWe want to select the principal components which explain the majority of the variation in the data, while not including too many components that are likely to introduce statistical noise. Looking at our PCA scree plots, we see that for both samples, the first 10 principal components capture the majority of the variation in our gene expression data. This heuristic of selecting the principal components before which you see a flattening of the curve is often employed when selecting PCs.\nPCA plot AL02\n\n\nPCA plot AL03\n\n\n\n\n3.5 Nearest neighbor graph construction/visualization\nNow that we have our PCA representation of the cell x gene data matrix, we can compute the neighborhood graph of cells with scanpy’s .neighbors method. This neighborhood graph essentially encodes the cell to cell similarities. After that, we embed this higher-dimensional graph into 2D by using Uniform Manifold Approximate and Projection or UMAP; .umap() in scanpy. \n\n\n\n\n\n\n3.6 Clustering\nOnce we have computed the nearest-neighbor graphs, we apply the leiden clustering algorithm. As the scanpy tutorial explains, the leiden clustering is applied directly to the neigbhorhood graph of cells and assigns each cell to a cluster.\nLeiden Clustering UMAP AL02\n\n\nLeiden Clustering UMAP AL03\n\n\n\n\n3.7 Re-assess QC and Cell-filtering\nNow that we have our clusters, we can check to see if the QC steps we performed earlier were successful. We can look at our UMAP plots to see if we have distinct clusters that are high in doublets, mitochondrial %, or have very low or high gene/UMI counts. An example would be if we have a cluster that has very high mitochondrial %, this cluster is likely not representative of a distinct cell-type but rather is a reflection of a collection of stressed/dying cells.\nUMAP Doublets AL02\n\n\nUMAP Mito Counts AL02\n\n\nUMAP Doublets AL03\n\n\nUMAP Mito Counts AL03\n\n\n\n\n3.8 Cell-type annotation and Differential Gene Expression Analysis\nThe final step of the analysis is to annotate the clusters and perform differential gene expression analysis (DGE).\nBefore we begin to annotate our clusters, we have to decide on the resolution of the leiden algorithm. The higher the resolution, the more distinct clusters we get, and vice versa. This means that if we pick too low of a resolution, we can only look at broader cell-types (B-cells, T-cells, etc), versus if we pick too large a resolution, we risk segregating identical cell-types into different clusters. I plotted the different resolutions below and went with 0.5, but we could always change this depending on our results.\nAL02 UMAP Leiden Resolutions\n\n\nAL03 UMAP Leiden Resolutions\n\n\nCell-type annotation involves using a set of marker genes, which are genes that are often highly expressed in a particular cell-type, to label our clusters. We use scanpy’s rank_genes_groups() function, which performs the differential expression by using the Wilcoxon ranked sum test to determine which genes in each cluster are significantly differently expressed than in other clusters.\nWe can either perform manual cell-type annotation using a pre-defined list of marker genes, or we can use differentially expressed genes as our markers.\nThe dotplots below help to visualize which genes are most highly expressed in each cluster. The size of the dot represents how many cells in the cluster express that particular gene, while the color is the mean expression level of that gene within that cluster.\nDotplot of DE Genes AL02\n\n\nDotplot of DE Genes AL03\n\n\nIn order to annotate the cell-types, I used the score_marker_genes() method from scanpy to find the highest expressed gene per cluster, then used a mapping between known marker genes and these highest expressed genes to classify the cluster.\nAL02 UMAP Cell-type Annotation\n\n\nAL03 UMAP Cell-type Annotation\n\n\nThe table below shows the top 10 differentially expressed genes per cluster\nAL02\n\n\nAL03"
  },
  {
    "objectID": "sc_rna_seq_analysis/geo_single_cell_rna_analysis.html#integration",
    "href": "sc_rna_seq_analysis/geo_single_cell_rna_analysis.html#integration",
    "title": "Single-cell RNA-seq Analysis",
    "section": "4 Integration",
    "text": "4 Integration\nAfter completing the SC RNA-seq analysis separately for each sample, we can also analyze them together by performing integration and batch correction, then doing clustering and cell-type annotation on the combined samples. We keep the filtered/QC steps and then write these filtered annotation data objects to .h5ad files, and then perform integration and batch correction, as well as the downstream steps of clustering, annotation, and DGE analysis.\n\n4.1 Nearest neighbor graph construction/visualization\nUMAP Nearest Neighbor Graph\n\n\n\n\n4.2 Clustering\nUMAP Clustering\n\n\n\n\n4.3 Re-assess QC and Cell-filtering\nDoublet QC\n\n\nMitochondrial Counts\n\n\n\n\n4.4 Cell-type annotation and DGE Analysis\nUMAP Leiden Resolutions\n\n\nDotplot of DE Genes\n\n\nUMAP Cell-type Annotation\n\n\nTop 10 DE Genes\n\n\n\n\n4.5 Automated Cell-type Annotation with Celltypist**\nInstead of manual cell-type annotation, we can use the python package Celltypist. \nCoarse UMAP using CellTypist\n\n\nFiner UMAP using CellTypist\n\n\nAll in all, I have performed a full Single-Cell RNA sequencing analysis starting from the raw sequencing data, performing read alignment/transcript quantification, and carried out post-processing steps with the python package Scanpy. All the scripts necessary to run these analyses and generate all subsequent plots are located in my github repo found here SC_RNA_Seq Github Repo."
  }
]